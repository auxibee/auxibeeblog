services:
  backend:
    build:
      context: ./backend

    container_name: auxibee_blog
    restart: unless-stopped
    environment:
      NODE_ENV: production
  frontend:
    build:
      context: ./frontend

    container_name: frontend
    ports:
      - "8000:2080"
      - "443:443"
      - "80:80"
    # depends_on:
    #   - backend

  #   volumes:
  #     - ./frontend/src:/usr/src/app/src
#   caddy:
#     image: caddy/caddy:2.1.1-alpine
#     container_name: caddy-service
#     restart: unless-stopped
#     ports:
#       - "80:80"
#       - "443:443"
#       - "8000:2080"
#     volumes:
#       - $PWD/Caddyfile:/etc/caddy/Caddyfile
#       - $PWD/frontend/build:/var/www/mysite
#       - $PWD/site:/srv
#       - caddy_data:/data
#       - caddy_config:/config
# volumes:
#   caddy_data:
#   caddy_config:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

